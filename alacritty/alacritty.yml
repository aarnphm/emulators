window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 90
    lines: 45
  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  position:
    x: 600
    y: 200
  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0
  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false
  dynamic_title: true
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #
  # Values for `decorations` (macOS only):
  #     - transparent: Title bar, transparent background and title bar buttons
  #     - buttonless: Title bar, transparent background, but no title bar buttons
  decorations: none
  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  #
  # Values for `startup_mode` (macOS only):
  #   - SimpleFullscreen
  startup_mode: Windowed
scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 100000
  # Scrolling distance multiplier.
  multiplier: 3
# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  # Style can be specified to pick a specific face.
  normal:
    family: 'JetBrainsMono Nerd Font'
    style: Regular
  # The bold font face
  bold:
    family: 'JetBrainsMono Nerd Font'
    style: Light
  # The italic font face
  italic:
    family: 'JetBrainsMono Nerd Font'
    style: Italic
  # Point size of the font
  size: 14
  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 2
  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: -2
    y: -1
  # Thin stroke font rendering (macOS only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina you
  # probably want this set to false.
  #
  # macOS >= 10.14.x:
  #
  # If the font quality on non-retina display looks bad then set
  # `use_thin_strokes` to `true` and enable font smoothing by running the
  # following command:
  #   `defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO`
  #
  # This is a global setting and will require a log out or restart to take
  # effect.
  builtin_box_drawing: true
# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: false
import:
  - /Users/aarnphm/.config/alacritty/oxocarbon-dark.yml
env:
  TERM: xterm-256color
# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  color: '#ffffff'
  duration: 0
selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: false
mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: {threshold: 300}
  triple_click: {threshold: 300}
  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false
  # URL launcher
  # url:
  # This program is executed when clicking on a text which is recognized as a URL.
  # The URL is always added to the command as the last parameter.
  #
  # When set to `None`, URL launching will be disabled completely.
  #
  # Default:
  #   - (macOS) open
  #   - (Linux) xdg-open
  #   - (Windows) explorer
  # launcher:
  #   program: xdg-open
  #   args: []
# These are the modifiers that need to be held down for opening URLs when clicking
# on them. The available modifiers are documented in the key binding section.
# modifiers: Control|Shift

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block
  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true
# Live config reload (changes require restart)
live_config_reload: true
shell:
  program: /bin/zsh
  args: ['-l']
hints:
  # Keys used for the hint labels.
  alphabet: 'jfkdls;ahgurieowpq'
  # List with all available hints
  #
  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods` and `mouse.mods` accept
  # the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  enbled:
    - regex: '(mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\u0000-\u001F\u007F-\u009F<>"\\s{-}\\^⟨⟩`]+'
      command: 'open'
      post_processing: true
      mouse: enabled:true mods:"None"
      binding:
        key: 'U'
        mods: 'Control|Shift'
# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
#
key_bindings:
  - {key: J, mods: Alt, chars: "\ej"}
  - {key: K, mods: Alt, chars: "\ek"}
  - {key: H, mods: Alt, chars: "\eh"}
  - {key: L, mods: Alt, chars: "\el"}
  - {key: Home, chars: "\eOH", mode: AppCursor}
  - {key: Home, chars: "\e[H", mode: ~AppCursor}
  - {key: End, chars: "\eOF", mode: AppCursor}
  - {key: End, chars: "\e[F", mode: ~AppCursor}
  - {key: PageUp, mods: Shift, chars: "\e[5;2~"}
  - {key: PageUp, mods: Control, chars: "\e[5;5~"}
  - {key: PageUp, chars: "\e[5~"}
  - {key: PageDown, mods: Shift, chars: "\e[6;2~"}
  - {key: PageDown, mods: Control, chars: "\e[6;5~"}
  - {key: PageDown, chars: "\e[6~"}
  - {key: Left, mods: Shift, chars: "\e[1;2D"}
  - {key: Left, mods: Control, chars: "\e[1;5D"}
  - {key: Left, mods: Alt, chars: "\e[1;3D"}
  - {key: Left, chars: "\e[D", mode: ~AppCursor}
  - {key: Left, chars: "\eOD", mode: AppCursor}
  - {key: Right, mods: Shift, chars: "\e[1;2C"}
  - {key: Right, mods: Control, chars: "\e[1;5C"}
  - {key: Right, mods: Alt, chars: "\e[1;3C"}
  - {key: Right, chars: "\e[C", mode: ~AppCursor}
  - {key: Right, chars: "\eOC", mode: AppCursor}
  - {key: Up, mods: Shift, chars: "\e[1;2A"}
  - {key: Up, mods: Control, chars: "\e[1;5A"}
  - {key: Up, mods: Alt, chars: "\e[1;3A"}
  - {key: Up, chars: "\e[A", mode: ~AppCursor}
  - {key: Up, chars: "\eOA", mode: AppCursor}
  - {key: Down, mods: Shift, chars: "\e[1;2B"}
  - {key: Down, mods: Control, chars: "\e[1;5B"}
  - {key: Down, mods: Alt, chars: "\e[1;3B"}
  - {key: Down, chars: "\e[B", mode: ~AppCursor}
  - {key: Down, chars: "\eOB", mode: AppCursor}
  - {key: Tab, mods: Shift, chars: "\e[Z"}
  - {key: F1, chars: "\eOP"}
  - {key: F2, chars: "\eOQ"}
  - {key: F3, chars: "\eOR"}
  - {key: F4, chars: "\eOS"}
  - {key: F5, chars: "\e[15~"}
  - {key: F6, chars: "\e[17~"}
  - {key: F7, chars: "\e[18~"}
  - {key: F8, chars: "\e[19~"}
  - {key: F9, chars: "\e[20~"}
  - {key: F10, chars: "\e[21~"}
  - {key: F11, chars: "\e[23~"}
  - {key: F12, chars: "\e[24~"}
  - {key: Back, chars: "\x7F"}
  - {key: Back, mods: Alt, chars: "\e\x7F"}
  - {key: Insert, chars: "\e[2~"}
  - {key: Delete, chars: "\e[3~"}
  - {key: Paste, action: Paste}
  - {key: Copy, action: Copy}
  - {key: L, mods: Control, action: ClearLogNotice}
  - {key: PageUp, mods: Shift, mode: ~Alt, action: ScrollPageUp}
  - {key: PageDown, mods: Shift, mode: ~Alt, action: ScrollPageDown}
  - {key: Home, mods: Shift, mode: ~Alt, action: ScrollToTop}
  - {key: End, mods: Shift, mode: ~Alt, action: ScrollToBottom}
  # Search Mode
  - {key: Return, mode: Search|Vi, action: SearchConfirm}
  - {key: Escape, mode: Search, action: SearchCancel}
  - {key: C, mods: Control, mode: Search, action: SearchCancel}
  - {key: U, mods: Control, mode: Search, action: SearchClear}
  - {key: W, mods: Control, mode: Search, action: SearchDeleteWord}
  - {key: P, mods: Control, mode: Search, action: SearchHistoryPrevious}
  - {key: N, mods: Control, mode: Search, action: SearchHistoryNext}
  - {key: Up, mode: Search, action: SearchHistoryPrevious}
  - {key: Down, mode: Search, action: SearchHistoryNext}
  - {key: Return, mode: Search|~Vi, action: SearchFocusNext}
  - {key: Return, mods: Shift, mode: Search|~Vi, action: SearchFocusPrevious}
  # Vi Mode
  - {key: P, mods: Shift|Control, mode: ~Search, action: ToggleViMode}
  - {key: Space, mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom}
  - {key: Escape, mode: Vi|~Search, action: ClearSelection}
  - {key: I, mode: Vi|~Search, action: ToggleViMode}
  - {key: I, mode: Vi|~Search, action: ScrollToBottom}
  - {key: C, mods: Control, mode: Vi|~Search, action: ToggleViMode}
  - {key: Y, mods: Control, mode: Vi|~Search, action: ScrollLineUp}
  - {key: E, mods: Control, mode: Vi|~Search, action: ScrollLineDown}
  - {key: G, mode: Vi|~Search, action: ScrollToTop}
  - {key: G, mods: Shift, mode: Vi|~Search, action: ScrollToBottom}
  - {key: B, mods: Control, mode: Vi|~Search, action: ScrollPageUp}
  - {key: F, mods: Control, mode: Vi|~Search, action: ScrollPageDown}
  - {key: U, mods: Control, mode: Vi|~Search, action: ScrollHalfPageUp}
  - {key: D, mods: Control, mode: Vi|~Search, action: ScrollHalfPageDown}
  - {key: Y, mode: Vi|~Search, action: Copy}
  - {key: Y, mode: Vi|~Search, action: ClearSelection}
  - {key: Copy, mode: Vi|~Search, action: ClearSelection}
  - {key: V, mode: Vi|~Search, action: ToggleNormalSelection}
  - {key: V, mods: Shift, mode: Vi|~Search, action: ToggleLineSelection}
  - {key: V, mods: Control, mode: Vi|~Search, action: ToggleBlockSelection}
  - {key: V, mods: Alt, mode: Vi|~Search, action: ToggleSemanticSelection}
  - {key: Return, mode: Vi|~Search, action: Open}
  - {key: K, mode: Vi|~Search, action: Up}
  - {key: J, mode: Vi|~Search, action: Down}
  - {key: H, mode: Vi|~Search, action: Left}
  - {key: L, mode: Vi|~Search, action: Right}
  - {key: Up, mode: Vi|~Search, action: Up}
  - {key: Down, mode: Vi|~Search, action: Down}
  - {key: Left, mode: Vi|~Search, action: Left}
  - {key: Right, mode: Vi|~Search, action: Right}
  - {key: Key0, mode: Vi|~Search, action: First}
  - {key: Key4, mods: Shift, mode: Vi|~Search, action: Last}
  - {key: Key6, mods: Shift, mode: Vi|~Search, action: FirstOccupied}
  - {key: H, mods: Shift, mode: Vi|~Search, action: High}
  - {key: M, mods: Shift, mode: Vi|~Search, action: Middle}
  - {key: L, mods: Shift, mode: Vi|~Search, action: Low}
  - {key: B, mode: Vi|~Search, action: SemanticLeft}
  - {key: W, mode: Vi|~Search, action: SemanticRight}
  - {key: E, mode: Vi|~Search, action: SemanticRightEnd}
  - {key: B, mods: Shift, mode: Vi|~Search, action: WordLeft}
  - {key: W, mods: Shift, mode: Vi|~Search, action: WordRight}
  - {key: E, mods: Shift, mode: Vi|~Search, action: WordRightEnd}
  - {key: Key5, mods: Shift, mode: Vi|~Search, action: Bracket}
  - {key: Slash, mode: Vi|~Search, action: SearchForward}
  - {key: Slash, mods: Shift, mode: Vi|~Search, action: SearchBackward}
  - {key: N, mode: Vi|~Search, action: SearchNext}
  - {key: N, mods: Shift, mode: Vi|~Search, action: SearchPrevious}
  - {key: L, mods: Control, mode: ~Vi|~Search, chars: "\f"}
